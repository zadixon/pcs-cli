{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aadTenantId": {
            "type": "string",
            "defaultValue": "fakevalue",
            "metadata": {
                "description": "The AAD tenant identifier (GUID)"
            }
        },
        "aadInstance": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/",
            "metadata": {
                "description": "Url of the AAD login page (example: https://login.microsoftonline.com/)"
            }
        },
        "aadClientId": {
            "type": "string",
            "defaultValue": "fakevalue",
            "metadata": {
                "description": "AAD application identifier (GUID)"
            }
        },
        "aadClientSecret": {
            "type": "securestring",
            "defaultValue": "fakevalue",
            "metadata": {
                "description": "AAD application key used by TSI client authentication"
            }
        },
        "solutionName": {
            "type": "string",
            "metadata": {
                "description": "The name of the solution"
            }
        },
        "solutionType": {
            "type": "string",
            "defaultValue": "RemoteMonitoring",
            "metadata": {
                "description": "The type of the solution"
            }
        },
        "solutionWebAppPort": {
            "type": "string",
            "defaultValue": "80",
            "metadata": {
                "description": "The port of the solution web application (e.g. 80, 443)"
            }
        },
        "microServiceRuntime": {
            "type": "string",
            "defaultValue": "dotnet",
            "allowedValues": [
                "dotnet", "java"
            ],
            "metadata": {
                "description": "The microservice runtime of the solution"
            }
        },
        "microServiceVersion": {
            "type": "string",
            "defaultValue": "testing",
            "metadata": {
                "description": "The container image version of the solution"
            }
        },
        "storageName": {
            "type": "string",
            "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageSkuName": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS"
            ],
            "metadata": {
                "description": "The storage SKU name"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "defaultValue": "core.windows.net",
            "allowedValues": [
                "core.windows.net",
                "core.chinacloudapi.cn",
                "core.cloudapi.de"
            ],
            "metadata": {
                "description": "Suffix added to Azure Storage hostname"
            }
        },
        "documentDBName": {
            "type": "string",
            "defaultValue": "[concat('documentdb-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBConsistencyLevel": {
            "type": "string",
            "allowedValues": [
                "Strong",
                "BoundedStaleness",
                "Session",
                "ConsistentPrefix",
                "Eventual"
            ],
            "defaultValue": "Strong",
            "metadata": {
                "description": "The documentDB deault consistency level for this account."
            }
        },
        "docDBMaxStalenessPrefix": {
            "type": "int",
            "minValue": 10,
            "maxValue": 1000,
            "defaultValue": 10,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "docDBMaxIntervalInSeconds": {
            "type": "int",
            "minValue": 5,
            "maxValue": 600,
            "defaultValue": 5,
            "metadata": {
                "description": "When documentDB consistencyLevel is set to BoundedStaleness, then this value is required, else it can be ignored."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "[concat('eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub"
            }
        },
        "eventHubRetentionInDays": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The event hub message retention in days"
            }
        },
        "eventHubPartitionCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The event hub partition count"
            }
        },
        "eventHubNamespaceName": {
            "type": "string",
            "defaultValue": "[concat('eventhubnamespace-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]", 
            "metadata": {
                "description": "The name of the Event Hub Namespace"
            }
        },
        "eventHubSkuTier": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic", "Standard"
            ],
            "metadata": {
                "description": "The Azure Event Hub SKU Tier"
            }
        },
        "eventHubSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The Azure Event Hub SKU Capacity"
            }
        },
        "eventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('iothubroutes-', parameters('iotHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Iot Hub"
            }
        },
        "actionsEventHubName": {
            "type": "string",
            "defaultValue": "[concat('actions-eventhub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of the Event Hub for actions"
            }
        },
        "actionsEventHubAuthorizationName": {
            "type": "string",
            "defaultValue": "[concat('actionroutes-', parameters('actionsEventHubName'))]",
            "metadata": {
                "description": "Authorization Rule Name for Event Hub endpoint in Stream Analytics"
            }
        },
        "serviceBusEndpointSuffix": {
            "type": "string",
            "defaultValue": "servicebus.windows.net",
            "allowedValues": [
                "servicebus.windows.net",
                "servicebus.chinacloudapi.cn"
            ],
            "metadata": {
                "description": "Suffix added to Service Bus endpoint"
            }
        },
        "iotHubName": {
            "type": "string",
            "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "F1", "S1", "S2", "S3"
            ],
            "metadata": {
                "description": "The Azure IoT Hub SKU"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Free", "Standard"
            ],
            "metadata": {
                "description": "The Azure IoT Hub tier"
            }
        },
        "provisioningServiceLocation": {
            "type": "string",
            "defaultValue": "westus",
            "allowedValues": [
                "eastus",
                "westus",
                "northeurope",
                "westeurope",
                "eastasia",
                "southeastasia"
            ],
            "metadata": {
                "description": "The location which supports Device Provisioning Service resource"
            }
        },
        "provisioningServiceName": {
            "type": "string",
            "defaultValue": "[concat('dps-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure IoT Hub Device Provisioning Service"
            }
        },
        "provisioningServiceSku": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1"
            ],
            "metadata": {
                "description": "The Azure IoT Hub Device Provisioning Service SKU"
            }
        },
        "streamingJobsName": {
            "type": "string",
            "defaultValue": "[concat('streamingjobs-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "The name of Azure StreamingJobs"
            }
        },
        "streamingJobsOutputStartMode": {
            "type": "string",
            "defaultValue": "JobStartTime",
            "allowedValues": [
                "JobStartTime",
                "LastOutputEventTime",
                "CustomTime"
            ],
            "metadata": {
                "description": "The start behavior of streamingjobs immediately upon creation"
            }
        },
        "streamingJobsEventsOutOfOrderPolicy": {
            "type": "string",
            "defaultValue": "Adjust",
            "allowedValues": [
                "Adjust",
                "Drop"
            ],
            "metadata": {
                "description": "Events that arrive outside the delay window will be dropped or adjusted based on the value selected"
            }
        },
        "streamingJobsInputContainerName": {
            "type": "string",
            "defaultValue": "referenceinput",
            "metadata": {
                "description": "The container name of reference input for the streamingjobs"
            }
        },
        "streamingJobsQuery": {
            "type": "object",
            "defaultValue": {
                "applyRuleFilterJsUdf": "function main(record) {\n    let ruleFunction = new Function('record', record.__rulefilterjs);\n    return ruleFunction(record);\n}",
                "flattenMeasurementsJsUdf": "function main(record) {\n\n    let flatRecord = {\n        '__deviceid': record.__deviceid,\n        '__ruleid': record.__ruleid\n    };\n\n    record.measurements.forEach(function (item) {\n        if (item.hasOwnProperty('measurementvalue')) {\n            flatRecord[item.measurementname] = item.measurementvalue;\n        }\n        else {\n            flatRecord[item.measurementname] = {\n                'avg': item.avg,\n                'max': item.max,\n                'min': item.min,\n                'count': item.count\n            };\n        }\n    });\n\n    return flatRecord;\n}",
                "removeUnusedPropertiesJsUdf": "function main(record) {\n    if (record) {\n        record.IoTHub && delete record.IoTHub;\n        record.PartitionId && delete record.PartitionId;\n        record.EventEnqueuedUtcTime && delete record.EventEnqueuedUtcTime;\n        record.EventProcessedUtcTime && delete record.EventProcessedUtcTime;\n    }\n    return record;\n}",
                "transformQuery": "WITH TelemetryAndRules AS\n(\n    SELECT\n        T.IotHub.ConnectionDeviceId as __deviceid,\n        T.PartitionId,\n        T.EventEnqueuedUtcTime as __receivedtime,\n        R.Id as __ruleid,\n        R.AggregationWindow,\n        Fields.ArrayValue as MeasurementName,\n        GetRecordPropertyValue(T, Fields.ArrayValue) as MeasurementValue\n    FROM\n        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\n        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId\n        JOIN Rules R ON R.GroupId = G.GroupId\n        CROSS APPLY GetArrayElements(R.Fields) AS Fields\n),\nAggregateMultipleWindows AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow1minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 1)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow5minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 5)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow10minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 10)\n),\nGroupAggregatedMeasurements AS (\n    SELECT\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.PartitionId,\n        AM.__lastReceivedTime,\n        Collect() AS Measurements\n    FROM\n        AggregateMultipleWindows AM PARTITION BY PartitionId\n    GROUP BY\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.PartitionId,\n        AM.__lastReceivedTime,\n        System.Timestamp\n),\nFlatAggregatedMeasurements AS (\n    SELECT\n        GA.__deviceid,\n        GA.__ruleid,\n        GA.__lastReceivedTime,\n        udf.flattenMeasurements(GA) AS __aggregates\n    FROM\n        GroupAggregatedMeasurements GA PARTITION BY PartitionId\n),\nCombineAggregatedMeasurementsAndRules AS (\n    SELECT\n        FA.__deviceid,\n        FA.__ruleid,\n        FA.__aggregates,\n        FA.__lastReceivedTime,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.Actions as __actions,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatAggregatedMeasurements FA PARTITION BY PartitionId\n        JOIN Rules R ON FA.__ruleid = R.Id\n),\nApplyAggregatedRuleFilters AS\n(\n    SELECT\n        CMR.*\n    FROM\n        CombineAggregatedMeasurementsAndRules CMR PARTITION BY PartitionId\n    WHERE TRY_CAST(udf.applyRuleFilter(CMR) AS bigint) = 1\n),\nGroupInstantMeasurements AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.__receivedTime,\n        Collect() AS Measurements\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'instant'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.__receivedTime,\n        System.Timestamp\n),\nFlatInstantMeasurements AS (\n    SELECT\n        GI.__deviceid,\n        GI.__ruleid,\n        GI.__receivedTime,\n        udf.flattenMeasurements(GI) AS __aggregates\n    FROM\n        GroupInstantMeasurements GI PARTITION BY PartitionId\n),\nCombineInstantMeasurementsAndRules as\n(\n    SELECT\n        FI.__deviceid,\n        FI.__ruleid,\n        FI.__receivedtime,\n        FI.__aggregates,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.Actions as __actions,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatInstantMeasurements FI PARTITION BY PartitionId\n        JOIN Rules R ON FI.__ruleid = R.Id\n),\nApplyInstantRuleFilters as\n(\n    SELECT\n        CI.*\n    FROM\n        CombineInstantMeasurementsAndRules CI PARTITION BY PartitionId\n    WHERE TRY_CAST(udf.applyRuleFilter(CI) AS bigint) = 1\n),\nCombineAlarms as\n(\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-NMessage' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AA.__description as [rule.description],\n        AA.__severity as [rule.severity],\n        AA.__actions as [rule.actions],\n        AA.__ruleid as [rule.id],\n        AA.__deviceId as [device.id],\n        AA.__aggregates,\n        AA.__lastReceivedTime as [device.msg.received]\n    FROM\n        ApplyAggregatedRuleFilters AA PARTITION BY PartitionId\n\n    UNION\n\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-1Message' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AI.__description as [rule.description],\n        AI.__severity as [rule.severity],\n        AI.__actions as [rule.actions],\n        AI.__ruleid as [rule.id],\n        AI.__deviceId as [device.id],\n        AI.__aggregates,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', AI.__receivedTime) as [device.msg.received]\n    FROM\n        ApplyInstantRuleFilters AI PARTITION BY PartitionId\n)\n\nSELECT\n    CA.[doc.schemaVersion],\n    CA.[doc.schema],\n    CA.[status],\n    CA.[logic],\n    CA.[created],\n    CA.[modified],\n    CA.[rule.description],\n    CA.[rule.severity],\n    CA.[rule.id],\n    CA.[device.id],\n    CA.[device.msg.received]\nINTO\n    Alarms\nFROM\n    CombineAlarms CA PARTITION BY PartitionId\n\nSELECT\n    CA.[created],\n    CA.[modified],\n    CA.[rule.description],\n    CA.[rule.severity],\n    CA.[rule.id],\n    CA.[rule.actions],\n    CA.[device.id],\n    CA.[device.msg.received]\nINTO\n    Actions\nFROM\n    CombineAlarms CA PARTITION BY __partitionid\nWHERE\n    CA.[rule.actions] IS NOT NULL\n\nSELECT\n        CONCAT(T.IoTHub.ConnectionDeviceId, ';', CAST(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) AS nvarchar(max))) as id,\n        1 as [doc.schemaVersion],\n        'd2cmessage' as [doc.schema],\n        T.IoTHub.ConnectionDeviceId as [device.id],\n        'device-sensors;v1' as [device.msg.schema],\n        'StreamingJobs' as [data.schema],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as [device.msg.created],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', T.EventEnqueuedUtcTime) as [device.msg.received],\n        udf.removeUnusedProperties(T) as Data\nINTO\n    Messages\nFROM\n    DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime",
                "alarmsOnlyQuery": "WITH TelemetryAndRules AS\n(\n    SELECT\n        T.IotHub.ConnectionDeviceId as __deviceid,\n        T.PartitionId,\n        T.EventEnqueuedUtcTime as __receivedtime,\n        R.Id as __ruleid,\n        R.AggregationWindow,\n        Fields.ArrayValue as MeasurementName,\n        GetRecordPropertyValue(T, Fields.ArrayValue) as MeasurementValue\n    FROM\n        DeviceTelemetry T PARTITION BY PartitionId TIMESTAMP BY T.EventEnqueuedUtcTime\n        JOIN DeviceGroups G ON T.IoTHub.ConnectionDeviceId = G.DeviceId\n        JOIN Rules R ON R.GroupId = G.GroupId\n        CROSS APPLY GetArrayElements(R.Fields) AS Fields\n),\nAggregateMultipleWindows AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow1minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 1)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow5minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 5)\n\n    UNION\n\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        AVG(TR.MeasurementValue),\n        MAX(TR.MeasurementValue),\n        MIN(TR.MeasurementValue),\n        COUNT(TR.MeasurementValue),\n        MAX(DATEDIFF(millisecond, '1970-01-01T00:00:00Z', TR.__receivedtime)) as __lastReceivedTime\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'tumblingwindow10minutes'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.MeasurementName,\n        TumblingWindow(minute, 10)\n),\nGroupAggregatedMeasurements AS (\n    SELECT\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.PartitionId,\n        AM.__lastReceivedTime,\n        Collect() AS Measurements\n    FROM\n        AggregateMultipleWindows AM PARTITION BY PartitionId\n    GROUP BY\n        AM.__deviceid,\n        AM.__ruleid,\n        AM.PartitionId,\n        AM.__lastReceivedTime,\n        System.Timestamp\n),\nFlatAggregatedMeasurements AS (\n    SELECT\n        GA.__deviceid,\n        GA.__ruleid,\n        GA.__lastReceivedTime,\n        udf.flattenMeasurements(GA) AS __aggregates\n    FROM\n        GroupAggregatedMeasurements GA PARTITION BY PartitionId\n),\nCombineAggregatedMeasurementsAndRules AS (\n    SELECT\n        FA.__deviceid,\n        FA.__ruleid,\n        FA.__aggregates,\n        FA.__lastReceivedTime,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.Actions as __actions,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatAggregatedMeasurements FA PARTITION BY PartitionId\n        JOIN Rules R ON FA.__ruleid = R.Id\n),\nApplyAggregatedRuleFilters AS\n(\n    SELECT\n        CMR.*\n    FROM\n        CombineAggregatedMeasurementsAndRules CMR PARTITION BY PartitionId\n    WHERE TRY_CAST(udf.applyRuleFilter(CMR) AS bigint) = 1\n),\nGroupInstantMeasurements AS (\n    SELECT\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.__receivedTime,\n        Collect() AS Measurements\n    FROM\n        TelemetryAndRules TR PARTITION BY PartitionId\n    WHERE\n        TR.AggregationWindow = 'instant'\n    GROUP BY\n        TR.__deviceid,\n        TR.__ruleid,\n        TR.PartitionId,\n        TR.__receivedTime,\n        System.Timestamp\n),\nFlatInstantMeasurements AS (\n    SELECT\n        GI.__deviceid,\n        GI.__ruleid,\n        GI.__receivedTime,\n        udf.flattenMeasurements(GI) AS __aggregates\n    FROM\n        GroupInstantMeasurements GI PARTITION BY PartitionId\n),\nCombineInstantMeasurementsAndRules as\n(\n    SELECT\n        FI.__deviceid,\n        FI.__ruleid,\n        FI.__receivedtime,\n        FI.__aggregates,\n        R.Description as __description,\n        R.Severity as __severity,\n        R.Actions as __actions,\n        R.__rulefilterjs as __rulefilterjs\n    FROM\n        FlatInstantMeasurements FI PARTITION BY PartitionId\n        JOIN Rules R ON FI.__ruleid = R.Id\n),\nApplyInstantRuleFilters as\n(\n    SELECT\n        CI.*\n    FROM\n        CombineInstantMeasurementsAndRules CI PARTITION BY PartitionId\n    WHERE TRY_CAST(udf.applyRuleFilter(CI) AS bigint) = 1\n),\nCombineAlarms as\n(\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-NMessage' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AA.__description as [rule.description],\n        AA.__severity as [rule.severity],\n        AA.__actions as [rule.actions],\n        AA.__ruleid as [rule.id],\n        AA.__deviceId as [device.id],\n        AA.__aggregates,\n        AA.__lastReceivedTime as [device.msg.received]\n    FROM\n        ApplyAggregatedRuleFilters AA PARTITION BY PartitionId\n\n    UNION\n\n    SELECT\n        1 as [doc.schemaVersion],\n        'alarm' as [doc.schema],\n        'open' as [status],\n        '1Rule-1Device-1Message' as [logic],\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as created,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', System.Timestamp) as modified,\n        AI.__description as [rule.description],\n        AI.__severity as [rule.severity],\n        AI.__actions as [rule.actions],\n        AI.__ruleid as [rule.id],\n        AI.__deviceId as [device.id],\n        AI.__aggregates,\n        DATEDIFF(millisecond, '1970-01-01T00:00:00Z', AI.__receivedTime) as [device.msg.received]\n    FROM\n        ApplyInstantRuleFilters AI PARTITION BY PartitionId\n)\n\nSELECT\n    CA.[doc.schemaVersion],\n    CA.[doc.schema],\n    CA.[status],\n    CA.[logic],\n    CA.[created],\n    CA.[modified],\n    CA.[rule.description],\n    CA.[rule.severity],\n    CA.[rule.id],\n    CA.[device.id],\n    CA.[device.msg.received]\nINTO\n    Alarms\nFROM\n    CombineAlarms CA PARTITION BY PartitionId\n\nSELECT\n    CA.[created],\n    CA.[modified],\n    CA.[rule.description],\n    CA.[rule.severity],\n    CA.[rule.id],\n    CA.[rule.actions],\n    CA.[device.id],\n    CA.[device.msg.received]\nINTO\n    Actions\nFROM\n    CombineAlarms CA PARTITION BY __partitionid\nWHERE\n    CA.[rule.actions] IS NOT NULL"
            },
            "metadata": {
                "description": "The query and udf functions for streamingjobs to process telemetry rules"
            }
        },
        "numberOfStreamingUnits": {
            "type": "int",
            "minValue": 1,
            "maxValue": 48,
            "defaultValue": 3,
            "allowedValues": [
              1, 3, 6, 12, 18, 24, 30, 36, 42, 48
            ],
            "metadata": {
                "description": "Number of Streaming Units"
              }
        },
        "pcsReleaseVersion": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "The release version is used for repoURL for reverse-proxy-dotnet and vmScriptUri"
            }
        },
        "pcsDockerTag": {
            "type": "string",
            "defaultValue": "testing",
            "metadata": {
                "description": "The docker tag can be same as release version and is the latest released docker image"
            }
        },
        "azureWebsiteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
            }
        },
        "remoteEndpointSSLThumbprint": {
            "type": "securestring",
            "metadata": {
                "description": "This is the thumbprint of the HTTPS SSL Certificate"
            },
            "defaultValue": "secretkey"
        },
        "remoteEndpointCertificate": {
            "type": "securestring",
            "metadata": {
                "description": "The certficate that needs to be updated to the VM"
            }
        },
        "remoteEndpointCertificateKey": {
            "type": "securestring",
            "metadata": {
                "description": "The certficate key that needs to be updated to the VM"
            }
        },
        "bingMapsLocation": {
            "type": "string",
            "defaultValue": "westus",
            "metadata": {
                "description": "Bing Maps region",
                "comments": "Marked for deletion, unused"
            }
        },
        "cloudType": {
            "type": "string",
            "defaultValue": "Global",
            "allowedValues": [
                "Global",
                "China",
                "Germany",
                "Fairfax"
            ],
            "metadata": {
                "description": "Cloud environment name"
            }
        },
        "deploymentId": {
            "type": "string",
            "metadata": {
                "description": "Unique Id of the deployment."
            },
            "defaultValue": "Undefined"
        },
        "diagnosticsEndpointUrl": {
            "type": "string",
            "metadata": {
                "description": "Diagnostics service endpoint url"
            },
            "defaultValue": "Undefined"
        },
        "telemetryStorageType": {
            "type": "string",
            "defaultValue": "cosmosdb",
            "allowedValues": [
                "cosmosdb",
                "tsi"
            ],
            "metadata": {
                "description": "Storage type for telemetry messages, supports TSI and CosmosDb"
            }
        },
        "tsiEnvironmentName": {
            "type": "string",
            "defaultValue": "[concat('tsi-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
            "metadata": {
                "description": "TSI environment name"
            }
        },
        "tsiEnvironmentSkuName": {
            "type": "string",
            "defaultValue": "S1",
            "allowedValues": [
                "S1",
                "S2"
            ],
            "metadata": {
                "description": "The name of the sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
            }
        },
        "tsiEnvironmentSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 10,
            "metadata": {
                "description": "The unit capacity of the Sku. For more information, see https://azure.microsoft.com/pricing/details/time-series-insights/"
            }
        },
        "tsiEnvironmentDataRetentionTime": {
            "type": "string",
            "defaultValue": "P180D",
            "metadata": {
                "description": "The minimum timespan the environment’s events will be available for query. The value must be specified in the ISO 8601 format, e.g. \"P180D\" for a retention policy of 180 days."
            }
        },
        "tsiEventSourceTimestampPropertyName": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 90,
            "metadata": {
                "description": "The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used."
            }
        },
        "tsiLocation" : {
            "type": "string",
            "defaultValue": "eastus2",
            "allowedValues": [
                "eastus",
                "eastus2",
                "westus",
                "westus2",
                "westcentralus",
                "northeurope",
                "westeurope"
            ],
            "metadata": {
                "description": "The location which supports Time Series Insights resource"
            }
        },
        "userPrincipalObjectId": {
            "type": "string",
            "defaultValue": "fakevalue",
            "metadata": {
                "description": "Object Id of the AAD user that will have access to the environment. Available from the Get-AzureRMADUser cmdlets"
            }
        },
        "aadClientServicePrincipalId": {
            "type": "string",
            "defaultValue": "fakevalue",
            "metadata": {
                "description": "Service principal Id of the AAD application that will have access to the environment. Available from the Get-AzureRMADServicePrincipal cmdlets"
            }
        },
        "azureActiveDirectoryEndpointUrl": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/",
            "metadata": {
                "description": "Azure Active Directory endpoint url"
            }
        },
        "azurePortalUrl": {
            "type": "string",
            "defaultValue": "https://portal.azure.com",
            "metadata": {
                "description": "Azure portal url"
            }
        },
        "azureResourceManagerEndpointUrl": {
            "type": "string",
            "defaultValue": "https://management.azure.com/",
            "metadata": {
                "description": "Azure Resource Manager url"
            }
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "documentDBApiVersion": "2016-03-19",
        "documentDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
        "eventHubApiVersion": "2017-04-01",
        "eventHubKeyName": "RootManageSharedAccessKey",
        "eventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('eventHubKeyName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventHubRouteKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules', parameters('eventHubNamespaceName'), parameters('eventHubName'), parameters('eventHubAuthorizationName'))]",
        "actionsEventHubKeyName": "RootManageSharedAccessKey",
        "actionsEventHubKeyResourceId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('eventHubNamespaceName'), variables('actionsEventHubKeyName'))]",
        "actionsEventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('actionsEventHubName'))]",
        "actionsEventHubAuthorizationResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespaceName'), parameters('actionsEventHubName'), parameters('actionsEventHubAuthorizationName'))]",
        "iotHubApiVersion": "2017-01-19",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "iotHubServiceKeyName": "service",
        "iotHubServiceKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubServiceKeyName'))]",
        "iotHubDefaultEndpoint": "events",
        "provisioningServiceApiVersion": "2017-11-15",
        "deviceNotificationRouteName": "DeviceNotifications",
        "streamAnalyticsApiVersion": "2016-03-01",
        "consumerGroupName": "streamingJobsConsumerGroup",
        "streamingJobsOutputDBName": "pcs-iothub-stream",
        "tsiConsumerGroupName": "timeSeriesInsightsConsumerGroup",
        "tsiEventSourceName": "[parameters('iotHubName')]",
        "tsiApiVersion": "2017-11-15",
        "tsiApplicationAccessPolicy": "[concat(parameters('tsiEnvironmentName'), '-application-policy')]",
        "tsiUserAccessPolicy": "[concat(parameters('tsiEnvironmentName'), '-user-policy')]",
        "tsiReaderRole": "Reader",
        "tsiContributorRole": "Contributor",
        "storageApiVersion": "2017-06-01",
        "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/',  parameters('storageName'))]",
        "sku": "S1",
        "workerSize": "1",
        "repoURL": "https://github.com/Azure/reverse-proxy-dotnet.git",
        "branch": "[parameters('pcsReleaseVersion')]",
        "hostingPlanName": "[parameters('azureWebsiteName')]",
        "azureMapsName": "[concat(take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5), '-map')]",
        "azureMapsVersion": "2017-01-01-preview",
        "azureMapsPricingSpec": "S0",
        "logicAppName": "[concat('logicapp-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
        "logicAppApiVersion": "2016-06-01",
        "logicAppConnectionApiVersion": "2016-06-01",
        "office365ConnectionName": "office365-connector",
        "office365ConnectionDisplayName": "Office365 Connector",
        "office365ConnectionUrl": "[concat(parameters('azurePortalUrl'), '/#@', parameters('aadTenantId'), '/resource/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Web/connections/', variables('office365ConnectionName'), '/edit' )]"
    },
    "resources": [
        {
            "comments": "AppService plan to host the Application Gateway Web App",
            "type": "Microsoft.Web/serverfarms",
            "kind": "linux",
            "sku": {
                "name": "[variables('sku')]",
                "capacity": "[variables('workerSize')]"
            },
            "name": "[variables('hostingPlanName')]",
            "apiVersion": "2016-09-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "kind": "linux",
                "reserved": true,
                "workerSize": 4
            }
        },
        {
            "comments": "Application Gateway Web App",
            "type": "Microsoft.Web/sites",
            "kind": "app,linux",
            "name": "[parameters('azureWebsiteName')]",
            "apiVersion": "2016-08-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "enabled": true,
                "reserved": true,
                "kind": "app,linux",
                "clientAffinityEnabled": true,
                "serverFarmId": "[variables('hostingPlanName')]",
                "siteConfig": {
                    "linuxFxVersion": "COMPOSE|dmVyc2lvbjogIjIiCnNlcnZpY2VzOgogIHJldmVyc2Vwcm94eToKICAgIGltYWdlOiBuYXJlc2hzaXJ2aS9yZW1vdGUtbW9uaXRvcmluZy1uZ2lueDoxLjAuMAogICAgcG9ydHM6CiAgICAgIC0gIjgwODA6ODA4MCIKCiAgd2VidWk6CiAgICBpbWFnZTogYXp1cmVpb3RwY3MvcGNzLXJlbW90ZS1tb25pdG9yaW5nLXdlYnVpOnRlc3RpbmcKCiAgYXV0aDoKICAgIGltYWdlOiBhenVyZWlvdHBjcy9wY3MtYXV0aC1kb3RuZXQ6dGVzdGluZwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gUENTX0FVVEhfUkVRVUlSRUQ9ZmFsc2UKICAgICAgLSBQQ1NfQ09SU19XSElURUxJU1Q9JHtBUFBTRVRUSU5HX1BDU19DT1JTX1dISVRFTElTVH0KICAgICAgLSBQQ1NfQVVUSF9JU1NVRVI9JHtBUFBTRVRUSU5HX1BDU19BVVRIX0lTU1VFUn0KICAgICAgLSBQQ1NfQVVUSF9BVURJRU5DRT0ke0FQUFNFVFRJTkdfUENTX0FVVEhfQVVESUVOQ0V9CgogIGNvbmZpZzoKICAgIGltYWdlOiBhenVyZWlvdHBjcy9wY3MtY29uZmlnLWRvdG5ldDp0ZXN0aW5nCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBQQ1NfU1RPUkFHRUFEQVBURVJfV0VCU0VSVklDRV9VUkw9aHR0cDovL3N0b3JhZ2VhZGFwdGVyOjkwMjIvdjEKICAgICAgLSBQQ1NfREVWSUNFU0lNVUxBVElPTl9XRUJTRVJWSUNFX1VSTD1odHRwOi8vZGV2aWNlc2ltdWxhdGlvbjo5MDAzL3YxCiAgICAgIC0gUENTX1RFTEVNRVRSWV9XRUJTRVJWSUNFX1VSTD1odHRwOi8vdGVsZW1ldHJ5OjkwMDQvdjEKICAgICAgLSBQQ1NfQVVUSF9XRUJTRVJWSUNFX1VSTD1odHRwOi8vYXV0aDo5MDAxL3YxCiAgICAgIC0gUENTX0FaVVJFTUFQU19LRVk9JHtBUFBTRVRUSU5HX1BDU19BWlVSRU1BUFNfS0VZfQogICAgICAtIFBDU19BVVRIX1JFUVVJUkVEPWZhbHNlCiAgICAgIC0gUENTX0NPUlNfV0hJVEVMSVNUPSR7QVBQU0VUVElOR19QQ1NfQ09SU19XSElURUxJU1R9CiAgICAKICBzdG9yYWdlYWRhcHRlcjoKICAgIGltYWdlOiBhenVyZWlvdHBjcy9wY3Mtc3RvcmFnZS1hZGFwdGVyLWRvdG5ldDp0ZXN0aW5nCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBQQ1NfU1RPUkFHRUFEQVBURVJfRE9DVU1FTlREQl9DT05OU1RSSU5HPSR7QVBQU0VUVElOR19QQ1NfU1RPUkFHRUFEQVBURVJfRE9DVU1FTlREQl9DT05OU1RSSU5HfQogICAgICAtIFBDU19BVVRIX1JFUVVJUkVEPWZhbHNlCiAgICAgIC0gUENTX0NPUlNfV0hJVEVMSVNUPSR7QVBQU0VUVElOR19QQ1NfQ09SU19XSElURUxJU1R9CgogIGlvdGh1Ym1hbmFnZXI6CiAgICBpbWFnZTogYXp1cmVpb3RwY3MvaW90aHViLW1hbmFnZXItZG90bmV0OnRlc3RpbmcKICAgIGVudmlyb25tZW50OgogICAgICAtIFBDU19BVVRIX1dFQlNFUlZJQ0VfVVJMPWh0dHA6Ly9hdXRoOjkwMDEvdjEKICAgICAgLSBQQ1NfSU9USFVCX0NPTk5TVFJJTkc9JHtBUFBTRVRUSU5HX1BDU19JT1RIVUJfQ09OTlNUUklOR30KICAgICAgLSBQQ1NfU1RPUkFHRUFEQVBURVJfV0VCU0VSVklDRV9VUkw9aHR0cDovL3N0b3JhZ2VhZGFwdGVyOjkwMjIvdjEKICAgICAgLSBQQ1NfQVVUSF9SRVFVSVJFRD1mYWxzZQoKICB0ZWxlbWV0cnk6CiAgICBpbWFnZTogemhhbmdodWEvdGVsZW1ldHJ5LWRvdG5ldDp0ZXN0aW5nCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBQQ1NfQVVUSF9XRUJTRVJWSUNFX1VSTD1odHRwOi8vYXV0aDo5MDAxL3YxCiAgICAgIC0gUENTX1RFTEVNRVRSWV9ET0NVTUVOVERCX0NPTk5TVFJJTkc9JHtBUFBTRVRUSU5HX1BDU19URUxFTUVUUllfRE9DVU1FTlREQl9DT05OU1RSSU5HfQogICAgICAtIFBDU19TVE9SQUdFQURBUFRFUl9XRUJTRVJWSUNFX1VSTD1odHRwOi8vc3RvcmFnZWFkYXB0ZXI6OTAyMi92MQogICAgICAtIFBDU19ESUFHTk9TVElDU19XRUJTRVJWSUNFX1VSTD1odHRwOi8vZGlhZ25vc3RpY3M6OTAwNi92MQogICAgICAtIFBDU19BVVRIX1JFUVVJUkVEPWZhbHNlCiAgICAgIC0gUENTX0FBRF9URU5BTlQ9JHtBUFBTRVRUSU5HX1BDU19BQURfVEVOQU5UfQogICAgICAtIFBDU19BQURfQVBQSUQ9JHtBUFBTRVRUSU5HX1BDU19BQURfQVBQSUR9CiAgICAgIC0gUENTX0FBRF9BUFBTRUNSRVQ9JHtBUFBTRVRUSU5HX1BDU19BQURfQVBQU0VDUkVUfQogICAgICAtIFBDU19URUxFTUVUUllfU1RPUkFHRV9UWVBFPXRzaQogICAgICAtIFBDU19UU0lfRlFETj0ke0FQUFNFVFRJTkdfUENTX1RTSV9GUUROfQogICAgICAtIFBDU19BWlVSRUJMT0JfQ09OTlNUUklORz0ke0FQUFNFVFRJTkdfUENTX0FaVVJFQkxPQl9DT05OU1RSSU5HfQogICAgICAtIFBDU19BQ1RJT05fRVZFTlRIVUJfQ09OTlNUUklORz0ke0FQUFNFVFRJTkdfUENTX0FDVElPTl9FVkVOVEhVQl9DT05OU1RSSU5HfQogICAgICAtIFBDU19BQ1RJT05fRVZFTlRIVUJfTkFNRT0ke0FQUFNFVFRJTkdfUENTX0FDVElPTl9FVkVOVEhVQl9OQU1FfQogICAgICAtIFBDU19MT0dJQ0FQUF9FTkRQT0lOVF9VUkw9JHtBUFBTRVRUSU5HX1BDU19MT0dJQ0FQUF9FTkRQT0lOVF9VUkx9CiAgICAgIC0gUENTX1NPTFVUSU9OX1dFQlNJVEVfVVJMPSR7QVBQU0VUVElOR19QQ1NfU09MVVRJT05fV0VCU0lURV9VUkx9CgogIGRldmljZXNpbXVsYXRpb246CiAgICBpbWFnZTogYXp1cmVpb3RwY3MvZGV2aWNlLXNpbXVsYXRpb24tZG90bmV0OkRTLTEuMC4yCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBQQ1NfSU9USFVCX0NPTk5TVFJJTkc9JHtBUFBTRVRUSU5HX1BDU19JT1RIVUJfQ09OTlNUUklOR30KICAgICAgLSBQQ1NfU1RPUkFHRUFEQVBURVJfV0VCU0VSVklDRV9VUkw9aHR0cDovL3N0b3JhZ2VhZGFwdGVyOjkwMjIvdjEKICAgICAgLSBQQ1NfQVVUSF9SRVFVSVJFRD1mYWxzZQ==",
                    "appSettings": [
                        {
                            "name": "DOCKER_REGISTRY_SERVER_URL",
                            "value": "https://index.docker.io"
                        },
                        {
                            "name": "WEBSITES_CONTAINER_START_TIME_LIMIT",
                            "value": 600
                        },
                        {
                            "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
                            "value": 7
                        },
                        {
                            "name": "APP_RUNTIME",
                            "value": "[parameters('microServiceRuntime')]"
                        },
                        {
                            "name": "PCS_AUTH_REQUIRED",
                            "value": "true"
                        },
                        {
                            "name": "PCS_AUTH_ISSUER",
                            "value": "[concat('\"', parameters('aadTenantId'), '\"')]"
                        },
                        {
                            "name": "PCS_AUTH_AUDIENCE",
                            "value": "[parameters('aadClientId')]"
                        },
                        {
                            "name": "PCS_IOTHUB_CONNSTRING",
                            "value": "[concat('\"', 'HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey, '\"')]"
                        },
                        {
                            "name": "PCS_STORAGEADAPTER_DOCUMENTDB_CONNSTRING",
                            "value": "[concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"')]"
                        },
                        {
                            "name": "PCS_TELEMETRY_STORAGE_TYPE",
                            "value": "[parameters('telemetryStorageType')]"
                        },
                        {
                            "name": "PCS_TELEMETRY_DOCUMENTDB_CONNSTRING",
                            "value": "[concat('\"', 'AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';', '\"')]"
                        },
                        {
                            "name": "PCS_ASA_DATA_AZUREBLOB_ACCOUNT",
                            "value": "[concat('\"', parameters('storageName'), '\"')]"
                        },
                        {
                            "name": "PCS_ASA_DATA_AZUREBLOB_KEY",
                            "value": "[concat('\"', listKeys(variables('storageResourceId'), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, '\"')]"
                        },
                        {
                            "name": "PCS_ASA_DATA_AZUREBLOB_ENDPOINT_SUFFIX",
                            "value": "[concat('\"', parameters('storageEndpointSuffix'), '\"')]"
                        },
                        {
                            "name": "PCS_AZUREBLOB_CONNSTRING",
                            "value": "[concat('\"','DefaultEndpointsProtocol=https;AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value, ';EndpointSuffix=', parameters('storageEndpointSuffix'), '\"')]"
                        },
                        {
                            "name": "PCS_EVENTHUB_CONNSTRING",
                            "value": "[concat('\"Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('actionsEventHubKeyName'), ';SharedAccessKey=', listkeys(variables('actionsEventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey, '\"')]"
                        },
                        {
                            "name": "PCS_EVENTHUB_NAME",
                            "value": "[parameters('eventHubName')]"
                        },
                        {
                            "name": "PCS_ACTION_EVENTHUB_CONNSTRING",
                            "value": "[concat('\"', 'Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('actionsEventHubKeyName'), ';SharedAccessKey=', listkeys(variables('actionsEventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey, '\"')]"
                        },
                        {
                            "name": "PCS_ACTION_EVENTHUB_NAME",
                            "value": "[parameters('actionsEventHubName')]"
                        },
                        {
                            "name": "PCS_AZUREMAPS_KEY",
                            "value": "[concat('\"', listkeys(variables('azureMapsName'), variables('azureMapsVersion')).primaryKey, '\"')]"
                        },
                        {
                            "name": "PCS_APPLICATION_SECRET",
                            "value": "[uniqueString(resourceGroup().id, deployment().name)]"
                        },
                        {
                            "name": "PCS_DOCKER_TAG",
                            "value": "[concat('\"', parameters('pcsDockerTag'), '\"')]"
                        },
                        {
                            "name": "PCS_LOG_LEVEL",
                            "value": "info"
                        },
                        {
                            "name": "PCS_SOLUTION_TYPE",
                            "value": "[parameters('solutionType')]"
                        },
                        {
                            "name": "PCS_SOLUTION_NAME",
                            "value": "[parameters('solutionName')]"
                        },
                        {
                            "name": "PCS_SEED_TEMPLATE",
                            "value": "default"
                        },
                        {
                            "name": "PCS_CLOUD_TYPE",
                            "value": "[parameters('cloudType')]"
                        },
                        {
                            "name": "PCS_SUBSCRIPTION_ID",
                            "value": "[subscription().subscriptionId]"
                        },
                        {
                            "name": "PCS_DEPLOYMENT_ID",
                            "value": "[parameters('deploymentId')]"
                        },
                        {
                            "name": "PCS_IOTHUB_NAME",
                            "value": "[parameters('iotHubName')]"
                        },
                        {
                            "name": "PCS_DIAGNOSTICS_ENDPOINT_URL",
                            "value": "[concat('\"', parameters('diagnosticsEndpointUrl'), '\"')]"
                        },
                        {
                            "name": "PCS_AAD_TENANT",
                            "value": "[concat('\"', parameters('aadTenantId'), '\"')]"
                        },
                        {
                            "name": "PCS_AAD_APPID",
                            "value": "[concat('\"', parameters('aadClientId'), '\"')]"
                        },
                        {
                            "name": "PCS_AAD_APPSECRET",
                            "value": "[concat('\"', parameters('aadClientSecret'), '\"')]"
                        },
                        {
                            "name": "PCS_TSI_FQDN",
                            "value": "[if(equals(parameters('telemetryStorageType'), 'tsi'), reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('tsiEnvironmentName'))).dataAccessFQDN, 'Undefined')]"
                        },
                        {
                            "name": "PCS_OFFICE365_CONNECTION_URL",
                            "value": "[variables('office365ConnectionUrl')]"
                        },
                        {
                            "name": "PCS_LOGICAPP_ENDPOINT_URL",
                            "value": "[concat('\"', listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', variables('logicAppName'), 'manual'), variables('logicAppApiVersion')).value, '\"')]"
                        },
                        {
                            "name": "PCS_ARM_ENDPOINT_URL",
                            "value": "[concat('\"', parameters('azureResourceManagerEndpointUrl'), '\"')]"
                        },
                        {
                            "name": "PCS_AAD_ENDPOINT_URL",
                            "value": "[parameters('azureActiveDirectoryEndpointUrl')]"
                        },
                        {
                            "name": "PCS_SOLUTION_WEBSITE_URL",
                            "value": "[concat('https://', parameters('azureWebsiteName'), '.azurewebsites.net')]"
                        },
                        {
                            "name": "PCS_CORS_WHITELIST",
                            "value": ""
                        }
                    ]
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts/', parameters('documentDbName'))]",
                "[resourceId('Microsoft.Maps/accounts', variables('azureMapsName'))]",
                "[resourceId('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]",
                "[resourceId('Microsoft.StreamAnalytics/streamingjobs', parameters('streamingJobsName'))]",
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]",
                "[variables('actionsEventHubResourceId')]",
                "[variables('actionsEventHubAuthorizationResourceId')]",
                "[variables('documentDBResourceId')]",
                "[resourceId('Microsoft.Web/connections', variables('office365ConnectionName'))]"
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "apiVersion": "[variables('storageApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageSkuName')]"
            }
        },
        {
            "comments": "Azure CosmosDb",
            "apiVersion": "[variables('documentDBApiVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('documentDBName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "name": "[parameters('documentDBName')]",
                "databaseAccountOfferType": "standard",
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "[parameters('docDBConsistencyLevel')]",
                    "maxStalenessPrefix": "[parameters('docDBMaxStalenessPrefix')]",
                    "maxIntervalInSeconds": "[parameters('docDBMaxIntervalInSeconds')]"
                }
            }
        }, 
        {
            "comments": "Azure Event Hub Namespace",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "type": "Microsoft.EventHub/namespaces",
            "name": "[parameters('eventHubNamespaceName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('eventHubSkuTier')]",
                "tier": "[parameters('eventHubSkuTier')]",
                "capacity": "[parameters('eventHubSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0
            }
        },
        {
            "comments": "Azure Event Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },        
        {
            "comments": "Event Hub Authorization for Iot Hub",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('eventHubName'), '/', parameters('eventHubAuthorizationName'))]",
            "apiVersion":  "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "comments": "Azure Event Hub For Triggering Actions",
            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('actionsEventHubName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "messageRetentionInDays": "[parameters('eventHubRetentionInDays')]",
                "partitionCount": "[parameters('eventHubPartitionCount')]",
                "status": "Active"
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]"
            ]
        },
        {
            "comments": "Event Hub Authorization for Actions",
            "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
            "name": "[concat(parameters('eventHubNamespaceName'), '/', parameters('actionsEventHubName'), '/', parameters('actionsEventHubAuthorizationName'))]",
            "apiVersion": "[variables('eventHubApiVersion')]",
            "location": "[variables('location')]",
            "properties": {
                "rights": [
                    "Send",
                    "Listen"
                ]
            },
            "dependsOn": [
                "[variables('eventHubNamespaceResourceId')]",
                "[variables('actionsEventHubResourceId')]"
            ]
        },
        {
            "comments": "Azure IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "properties": {
                "location": "[variables('location')]",
                "routing": {
                    "endpoints": {
                        "eventHubs": [
                            {
                                "connectionString": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', parameters('eventHubAuthorizationName'), ';SharedAccessKey=', listkeys(variables('eventHubRouteKeyResourceId'), variables('eventHubApiVersion')).primaryKey, ';EntityPath=',  parameters('eventHubName'))]",
                                "name": "[variables('deviceNotificationRouteName')]",
                                "subscriptionId": "[subscription().subscriptionId]",
                                "resourceGroup": "[resourceGroup().name]"
                            }
                        ]
                    },
                    "routes": [
                        {
                            "name": "TwinRoute",
                            "source": "TwinChangeEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        },
                        {
                            "name": "LifecycleRoute",
                            "source": "DeviceLifecycleEvents",
                            "condition": "true",
                            "endpointNames": [
                                "[variables('deviceNotificationRouteName')]"
                            ],
                            "isEnabled": true
                        }
                    ],
                    "fallbackRoute": {
                        "name": "$fallback",
                        "source": "DeviceMessages",
                        "condition": "true",
                        "endpointNames": [
                            "[variables('iotHubDefaultEndpoint')]"
                        ],
                        "isEnabled": true
                    }
                }
            },
            "dependsOn": [
                "[variables('eventHubResourceId')]"
            ]
        },
        {
            "name": "[parameters('provisioningServiceName')]",
            "type": "Microsoft.Devices/provisioningServices",
            "apiVersion": "[variables('provisioningServiceApiVersion')]",
            "location": "[parameters('provisioningServiceLocation')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "iotHubs": [
                    {
                        "connectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]",
                        "location": "[variables('location')]"
                    }
                ]
            },
            "sku": {
                "name": "[parameters('provisioningServiceSku')]",
                "capacity": 1
            },
            "dependsOn": ["[parameters('iotHubName')]"]
        },
        {
            "comments": "Azure Maps service",
            "type": "Microsoft.Maps/accounts",
            "sku": {
                "name": "[variables('azureMapsPricingSpec')]"
            },
            "name": "[variables('azureMapsName')]",
            "apiVersion": "[variables('azureMapsVersion')]",
            "location": "global",
            "properties": {}
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('consumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Consumer Group of IoT Hub",
            "condition": "[equals(parameters('telemetryStorageType'), 'tsi')]",
            "apiVersion": "[variables('iotHubApiVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('tsiConsumerGroupName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Azure Time Series Insights",
            "condition": "[equals(parameters('telemetryStorageType'), 'tsi')]",
            "type": "Microsoft.TimeSeriesInsights/environments",
            "name": "[parameters('tsiEnvironmentName')]",
            "apiVersion": "[variables('tsiApiVersion')]",
            "location": "[parameters('tsiLocation')]",
            "properties": {
                "dataRetentionTime": "[parameters('tsiEnvironmentDataRetentionTime')]"
            },
            "sku": {
                "name": "[parameters('tsiEnvironmentSkuName')]",
                "capacity": "[parameters('tsiEnvironmentSkuCapacity')]"
            },
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "resources": [
                {
                    "condition": "[equals(parameters('telemetryStorageType'), 'tsi')]",
                    "type": "eventsources",
                    "name": "[variables('tsiEventSourceName')]",
                    "apiVersion": "[variables('tsiApiVersion')]",
                    "location": "[parameters('tsiLocation')]",
                    "kind": "Microsoft.IoTHub",
                    "properties": {
                        "eventSourceResourceId": "[variables('iotHubResourceId')]",
                        "iotHubName": "[parameters('iotHubName')]",
                        "consumerGroupName": "[variables('tsiConsumerGroupName')]",
                        "keyName": "[variables('iotHubServiceKeyName')]",
                        "sharedAccessKey": "[concat(listkeys(variables('iotHubServiceKeyResource'), variables('iotHubApiVersion')).primaryKey)]",
                        "timestampPropertyName": "[parameters('tsiEventSourceTimestampPropertyName')]"
                    },
                    "dependsOn": [
                        "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
                    ]
                },
                {
                    "condition": "[equals(parameters('telemetryStorageType'), 'tsi')]",
                    "type": "accessPolicies",
                    "name": "[variables('tsiApplicationAccessPolicy')]",
                    "apiVersion": "[variables('tsiApiVersion')]",
                    "properties": {
                        "principalObjectId": "[parameters('aadClientServicePrincipalId')]",
                        "roles": [
                            "[variables('tsiReaderRole')]"
                        ]
                    },
                    "dependsOn": [
                        "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
                    ]
                },
                {
                    "condition": "[equals(parameters('telemetryStorageType'), 'tsi')]",
                    "type": "accessPolicies",
                    "name": "[variables('tsiUserAccessPolicy')]",
                    "apiVersion": "[variables('tsiApiVersion')]",
                    "properties": {
                        "principalObjectId": "[parameters('userPrincipalObjectId')]",
                        "roles": [
                            "[variables('tsiContributorRole')]"
                        ]
                    },
                    "dependsOn": [
                        "[concat('Microsoft.TimeSeriesInsights/environments/', parameters('tsiEnvironmentName'))]"
                    ]
                }
            ],
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "comments": "Azure Stream Analytics streamingjobs",
            "apiVersion": "[variables('streamAnalyticsApiVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[parameters('streamingJobsName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]",
                "[variables('actionsEventHubAuthorizationResourceId')]",
                "[variables('documentDBResourceId')]"
            ],
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "eventsOutOfOrderMaxDelayInSeconds": 10,
                "eventsOutOfOrderPolicy": "[parameters('streamingJobsEventsOutOfOrderPolicy')]",
                "inputs": [
                    {
                        "name": "DeviceTelemetry",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "consumerGroupName": "[variables('consumerGroupName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]",
                                    "endpoint": "messages/events"
                                },
                                "type": "Microsoft.Devices/IotHubs"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Stream"
                        }
                    },
                    {
                        "name": "DeviceGroups",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "[parameters('streamingJobsInputContainerName')]",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "{date}/{time}/devicegroups.csv",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "fieldDelimiter": ",",
                                    "encoding": "UTF8"
                                },
                                "type": "Csv"
                            },
                            "type": "Reference"
                        }
                    },
                    {
                        "name": "Rules",
                        "properties": {
                            "datasource": {
                                "properties": {
                                    "container": "[parameters('streamingJobsInputContainerName')]",
                                    "dateFormat": "yyyy-MM-dd",
                                    "timeFormat": "HH-mm",
                                    "pathPattern": "{date}/{time}/rules.json",
                                    "storageAccounts": [
                                        {
                                            "accountKey": "[listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value]",
                                            "accountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "type": "Microsoft.Storage/Blob"
                            },
                            "serialization": {
                                "properties": {
                                    "encoding": "UTF8"
                                },
                                "type": "Json"
                            },
                            "type": "Reference"
                        }
                    }
                ],
                "outputs": [
                    {
                        "name": "Alarms",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDbName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "alarms"
                                }
                            }
                        }
                    },
                    {
                        "name": "Messages",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.Storage/DocumentDB",
                                "properties": {
                                    "accountId": "[parameters('documentDbName')]",
                                    "accountKey": "[listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey]",
                                    "database": "[variables('streamingJobsOutputDBName')]",
                                    "collectionNamePattern": "[if(equals(parameters('telemetryStorageType'), 'tsi'), 'alarms', 'messages')]"
                                }
                            }
                        }
                    },
                    {
                        "name": "Actions",
                        "properties": {
                            "datasource": {
                                "type": "Microsoft.ServiceBus/EventHub",
                                "properties": {
                                    "serviceBusNamespace": "[parameters('eventHubNamespaceName')]",
                                    "sharedAccessPolicyName": "[parameters('actionsEventHubAuthorizationName')]",
                                    "sharedAccessPolicyKey": "[listkeys(resourceId('Microsoft.EventHub/namespaces/eventhubs/authorizationRules', parameters('eventHubNamespaceName'), parameters('actionsEventHubName'), parameters('actionsEventHubAuthorizationName')), variables('eventHubApiVersion')).primaryKey]",
                                    "eventHubName": "[parameters('actionsEventHubName')]"
                                }
                            },
                            "serialization": {
                                "type": "Json",
                                "properties": {
                                    "encoding": "UTF8",
                                    "format": "LineSeparated"
                                }
                            }
                        }
                    }
                ],
                "functions": [
                    {
                        "name": "flattenMeasurements",
                        "properties": {
                            "type": "Scalar",
                            "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').flattenMeasurementsJsUdf]"
                                    }
                                }
                          }
                        }
                    },
                    {
                        "name": "applyRuleFilter",
                        "properties": {
                            "type": "Scalar",
                            "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').applyRuleFilterJsUdf]"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "name": "removeUnusedProperties",
                        "properties": {
                            "type": "Scalar",
                            "properties": {
                                "inputs": [
                                    {
                                        "dataType": "record"
                                    }
                                ],
                                "output": {
                                    "dataType": "any"
                                },
                                "binding": {
                                    "type": "Microsoft.StreamAnalytics/JavascriptUdf",
                                    "properties": {
                                        "script": "[parameters('streamingJobsQuery').removeUnusedPropertiesJsUdf]"
                                    }
                                }
                            }
                        }
                    }
                ],
                "transformation": {
                    "name": "Alarms",
                    "properties": {
                        "query": "[if(equals(parameters('telemetryStorageType'), 'tsi'), parameters('streamingJobsQuery').alarmsOnlyQuery, parameters('streamingJobsQuery').transformQuery)]",
                        "streamingUnits": "[parameters('numberOfStreamingUnits')]"
                    }
                }
            }
        },
        {
            "comments": "Azure Logic Apps",
            "type": "Microsoft.Logic/workflows",
            "name": "[variables('logicAppName')]",
            "apiVersion": "[variables('logicAppApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "actions": {
                        "For_each": {
                            "actions": {
                                "Send_an_email": {
                                    "inputs": {
                                        "body": {
                                            "Body": "@body('Parse_JSON')?['body']",
                                            "IsHtml": true,
                                            "Subject": "@body('Parse_JSON')?['subject']",
                                            "To": "@items('For_each')"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/Mail"
                                    },
                                    "runAfter": {},
                                    "type": "ApiConnection"
                                }
                            },
                            "foreach": "@body('Parse_JSON')?['recipients']",
                            "runAfter": {
                                "Parse_JSON": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "Parse_JSON": {
                            "inputs": {
                                "content": "@triggerBody()",
                                "schema": {
                                    "properties": {
                                        "body": {
                                            "type": "string"
                                        },
                                        "recipients": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "subject": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "runAfter": {},
                            "type": "ParseJson"
                        }
                    },
                    "contentVersion": "1.0.0.0",
                    "outputs": {},
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "inputs": {
                                "schema": {
                                    "properties": {
                                        "body": {
                                            "type": "string"
                                        },
                                        "recipients": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "subject": {
                                            "type": "string"
                                        }
                                    },
                                    "type": "object"
                                }
                            },
                            "kind": "Http",
                            "type": "Request"
                        }
                    }
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "office365": {
                                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]",
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('office365ConnectionName'))]",
                                "connectionName": "[variables('office365ConnectionName')]"
                            }
                        }
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('office365ConnectionName'))]"
            ]
        },
        {
            "comments": "Azure Logic Apps Connector",
            "type": "Microsoft.Web/Connections",
            "name": "[variables('office365ConnectionName')]",
            "apiVersion": "[variables('logicAppConnectionApiVersion')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[parameters('solutionType')]"
            },
            "properties": {
                "api": {
                    "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                },
                "displayName": "[variables('office365ConnectionDisplayName')]"
            }
        }
    ],
    "outputs": {
        "resourceGroup" : {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "messagesEventHubConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('eventHubKeyName'), ';SharedAccessKey=', listkeys(variables('eventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey)]"
        },
        "messagesEventHubName": {
            "type": "string",
            "value": "[parameters('eventHubName')]"
        },
        "actionsEventHubConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=sb://', parameters('eventHubNamespaceName'), '.', parameters('serviceBusEndpointSuffix'), '/;SharedAccessKeyName=', variables('actionsEventHubKeyName'), ';SharedAccessKey=', listkeys(variables('actionsEventHubKeyResourceId'), variables('eventHubApiVersion')).primaryKey)]"
        },
        "actionsEventHubName": {
            "type": "string",
            "value": "[parameters('actionsEventHubName')]"
        },
        "iotHubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
        },
        "documentDBConnectionString" : {
            "type": "string",
            "value": "[concat('AccountEndpoint=', reference(variables('documentDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('documentDBResourceId'), variables('documentDBApiVersion')).primaryMasterKey, ';')]"
        },
        "azureWebsite": {
            "type": "string",
            "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
        },
        "azureMapsKey": {
            "type": "string",
            "value": "[listkeys(variables('azureMapsName'), variables('azureMapsVersion')).primaryKey]"
        },
        "storageConnectionString": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageResourceId'), variables('storageApiVersion')).keys[0].value, ';EndpointSuffix=', parameters('storageEndpointSuffix'))]"
        },
        "streamingJobsName": {
            "type": "string",
            "value": "[parameters('streamingJobsName')]"
        },
        "aadClientSecret": {
            "type": "string",
            "value": "[parameters('aadClientSecret')]"
        },
        "telemetryStorageType": {
            "type": "string",
            "value": "[parameters('telemetryStorageType')]"
        },
        "tsiDataAccessFQDN": {
            "type": "string",
            "value": "[if(equals(parameters('telemetryStorageType'), 'tsi'), reference(resourceId('Microsoft.TimeSeriesInsights/environments', parameters('tsiEnvironmentName'))).dataAccessFQDN, 'Undefined')]"
        },
        "office365ConnectionUrl": {
            "type": "string",
            "value": "[variables('office365ConnectionUrl')]"
        },
        "logicAppEndpointUrl": {
            "type": "string",
            "value": "[concat(listCallbackURL(resourceId('Microsoft.Logic/workflows/triggers', variables('logicAppName'), 'manual'), variables('logicAppApiVersion')).value)]"
        }
    }
}
